package me.cooljwb.vulnerabilitypatcher.patches;

import org.bukkit.entity.Arrow;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.SpectralArrow;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.entity.ProjectileLaunchEvent;
import org.bukkit.event.player.PlayerVelocityEvent;

import java.util.ArrayList;
import java.util.Arrays;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Arrows extends Patches implements Listener
{

    private ArrayList<EntityType> blockedEntityTypes = new ArrayList<>(Arrays.asList(EntityType.ARROW, EntityType.SPECTRAL_ARROW));

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerVelocityEvent(PlayerVelocityEvent event)
    {
        if (event.getVelocity().getX() > 10 || event.getVelocity().getY() > 10 || event.getVelocity().getZ() > 10)
        {
            fired_countermeasure("PlayerVelocity: " + event.getVelocity().getX() + " " + event.getVelocity().getY() + " " + event.getVelocity().getZ());
            event.setCancelled(true);
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntitySpawnEvent(EntitySpawnEvent event)
    {
        if (event.getEntity().getType() == EntityType.ARROW)
        {
            Arrow arrow = (Arrow) event.getEntity();
            double damage = getArrowDamage(arrow);

            if (arrow.getKnockbackStrength() > 10)
            {
                fired_countermeasure("ArrowKnockbackStrenght: " + arrow.getKnockbackStrength());
                arrow.setKnockbackStrength(10);
            }

            if (damage < 0 || damage > 214748364)
            {
                fired_countermeasure("ArrowDamage: " + damage);
                setArrowDamage(arrow, 0);
            }
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onProjectileLaunchEvent(ProjectileLaunchEvent event)
    {
        if (event.getEntity() instanceof Arrow && blockedEntityTypes.contains(event.getEntity().getType()))
        {
            double damage;
            int knockback;

            if (event.getEntity() instanceof SpectralArrow)
            {
                SpectralArrow spec_arrow = (SpectralArrow) event.getEntity();
                damage = getArrowDamage((Arrow) spec_arrow);
                knockback = spec_arrow.getKnockbackStrength();

                if (knockback > 10)
                {
                    fired_countermeasure("ArrowKnockbackStrenght: " + knockback);
                    spec_arrow.setKnockbackStrength(10);
                }

                if (damage < 0 || damage > 214748364)
                {
                    fired_countermeasure("ArrowDamage: " + damage);
                    setArrowDamage((Arrow) spec_arrow, 0);
                }
            }
            else
            {
                Arrow arrow = (Arrow) event.getEntity();
                damage = getArrowDamage(arrow);
                knockback = arrow.getKnockbackStrength();

                if (knockback > 10)
                {
                    fired_countermeasure("ArrowKnockbackStrenght: " + arrow.getKnockbackStrength());
                    arrow.setKnockbackStrength(10);
                }

                if (damage < 0 || damage > 214748364)
                {
                    fired_countermeasure("ArrowDamage: " + damage);
                    setArrowDamage(arrow, 0);
                }
            }
        }

        debug(event);
    }
}
