package me.cooljwb.vulnerabilitypatcher.modifiers;

import com.mojang.brigadier.exceptions.CommandSyntaxException;
import me.cooljwb.vulnerabilitypatcher.Variables;
import me.cooljwb.vulnerabilitypatcher.VulnerabilityPatcher;
import me.cooljwb.vulnerabilitypatcher.patches.Patches;
import net.minecraft.nbt.MojangsonParser;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.craftbukkit.v1_17_R1.entity.CraftEntity;
import org.bukkit.craftbukkit.v1_17_R1.entity.CraftItem;
import org.bukkit.craftbukkit.v1_17_R1.entity.CraftPlayer;
import org.bukkit.craftbukkit.v1_17_R1.inventory.CraftItemStack;
import org.bukkit.entity.Arrow;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Firework;
import org.bukkit.entity.Player;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.SpawnEggMeta;
import org.bukkit.projectiles.ProjectileSource;

import java.io.File;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

public class NBTModifier_1_17_1
{

    private Logger log = Logger.getLogger("Minecraft");

    /* Misc */
    public void log(Level level, String message)
    {
        log.log(level, String.format("[%s] %s", VulnerabilityPatcher.pluginName, message));
    }

    private void fired_countermeasure(String reason)
    {
        if (Patches.devmode)
        {
            log(Level.INFO, String.format("Fired countermeasure in %s reason: %s", getClass().getName(), reason));
        }
    }

    private NBTTagCompound getItemNBT(ItemStack item)
    {
        if (item != null)
        {
            net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);
            if (nmsItemStack != null)
            {
                return nmsItemStack.getTag();
            }
        }
        return null;
    }

    private NBTTagCompound getEntityNBT(Entity entity)
    {
        net.minecraft.world.entity.Entity nmsEntity = ((CraftEntity) entity).getHandle();
        NBTTagCompound tag = new NBTTagCompound();
        nmsEntity.save(tag);
        return tag;
    }

    private void setEntityNBT(Entity entity, NBTTagCompound nbtTagCompound)
    {
        net.minecraft.world.entity.Entity nmsEntity = ((CraftEntity) entity).getHandle();
        nmsEntity.save(nbtTagCompound);
    }

    public NBTTagList getAttributeList(ItemStack item)
    {
        NBTTagCompound itemtag = getItemNBT(item);

        if (item != null && itemtag != null && itemtag.hasKey("AttributeModifiers"))
        {
            return getItemNBT(item).getList("AttributeModifiers", 10);
        }
        return null;
    }

    String itemToString(ItemStack item)
    {
        if (item != null)
        {
            net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if (nmsItemStack.hasTag())
            {
                return nmsItemStack.getTag().toString();
            }
        }
        return "";
    }

    boolean removePlayerdata(String player)
    {
        boolean success = false;
        for (World world : Bukkit.getWorlds())
        {
            File localUUIDfile = new File(Bukkit.getServer().getWorldContainer() + "/" + world.getName() + "/playerdata/" + Bukkit.getOfflinePlayer(player).getUniqueId().toString() + ".dat");

            if (localUUIDfile.exists())
            {
                if (localUUIDfile.delete())
                {
                    success = true;
                }
            }
        }
        return success;
    }

    void resetMeta(Player player, ItemStack item, boolean mainhand)
    {
        net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if (nmsItemStack.hasTag() && nmsItemStack.getTag().hasKey("pages"))
        {
            String pages = nmsItemStack.getTag().getList("pages", 8).toString();
            if (pages.contains("clickEvent") || pages.contains("hoverEvent"))
            {
                BookMeta meta = (BookMeta) item.getItemMeta();
                ItemStack book = new ItemStack(Material.WRITTEN_BOOK);

                meta.setPages(meta.getPages());
                book.setItemMeta(meta);

                if (mainhand)
                {
                    player.getInventory().setItemInMainHand(book);
                }
                else
                {
                    player.getInventory().setItemInOffHand(book);
                }
            }
        }
    }

    boolean isPlayer(ProjectileSource source)
    {
        return source instanceof CraftPlayer;
    }

    double getArrowDamage(Arrow arrow)
    {
        return getEntityNBT(arrow).hasKey("damage") ? getEntityNBT(arrow).getDouble("damage") : 0;
    }

    void setArrowDamage(Arrow arrow, double amount)
    {
        NBTTagCompound tag = getEntityNBT(arrow);
        if (tag.hasKey("damage"))
        {
            tag.setDouble("damage", amount);
            setEntityNBT(arrow, tag);
        }
    }

    int getFireworkEffectSize(Firework firework)
    {
        NBTTagCompound tag = getEntityNBT(firework);
        if (tag.hasKey("FireworksItem") && tag.getCompound("FireworksItem").hasKey("tag") && tag.getCompound("FireworksItem").getCompound("tag").hasKey("Fireworks") && tag.getCompound("FireworksItem").getCompound("tag").getCompound("Fireworks").hasKey("Explosions"))
        {
            return tag.getCompound("FireworksItem").getCompound("tag").getCompound("Fireworks").getList("Explosions", 10).size();
        }
        return 0;
    }

    boolean hasFireworkLargeEffect(Firework firework)
    {
        NBTTagCompound tag = getEntityNBT(firework);
        if (tag.hasKey("FireworksItem") && tag.getCompound("FireworksItem").hasKey("tag") && tag.getCompound("FireworksItem").getCompound("tag").hasKey("Fireworks") && tag.getCompound("FireworksItem").getCompound("tag").getCompound("Fireworks").hasKey("Explosions"))
        {
            NBTTagList explosions = tag.getCompound("FireworksItem").getCompound("tag").getCompound("Fireworks").getList("Explosions", 10);
            for (int x = 0; x <= (explosions.size() - 1); x++)
            {
                if (explosions.getCompound(x).getInt("Type") == 1 || explosions.getCompound(x).getInt("Type") == 3)
                {
                    return true;
                }
            }
        }
        return false;
    }

    boolean isCrashItem(ItemStack item)
    {
        if (item != null)
        {
            net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if (nmsItemStack.getTag() != null)
            {
                NBTTagCompound itemtag = nmsItemStack.getTag();

                if (itemtag.toString().contains("translation.test.invalid"))
                {
                    fired_countermeasure("isCrashItem");
                    return true;
                }
            }
        }
        return false;
    }

    boolean containsCrashItem(ItemStack item)
    {
        if (item != null)
        {
            net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if (nmsItemStack.getTag() != null)
            {
                Pattern pattern = Pattern.compile("([a-z0-9/._-])");
                NBTTagCompound blockEntityTag = nmsItemStack.getTag().getCompound("BlockEntityTag");
                NBTTagList itemList = blockEntityTag.getList("Items", 10);

                for (int a = 0; a <= itemList.size(); a++)
                {
                    NBTTagCompound itemtag = itemList.getCompound(a).getCompound("tag");

                    if (itemtag.toString().contains("translation.test.invalid")
                            || (blockEntityTag.hasKey("LootTable") && !pattern.matcher(blockEntityTag.getString("LootTable")).find()))
                    {
                        fired_countermeasure("containsCrashItem");
                        return true;
                    }
                }
            }
        }
        return false;
    }

    boolean isDeathItem(ItemStack item)
    {
        net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if (nmsItemStack != null && nmsItemStack.hasTag())
        {
            return isDeathItem(nmsItemStack.getTag());
        }
        return false;
    }

    private boolean isDeathItem(NBTTagCompound item)
    {
        if (item != null)
        {
            NBTTagList attrlist = item.getList("AttributeModifiers", 10);

            if (attrlist != null)
            {
                for (int i = 0; i < attrlist.size(); i++)
                {
                    NBTTagCompound compound = (NBTTagCompound) attrlist.get(i);
                    if ((compound.getString("Name").equalsIgnoreCase("MAX_HEALTH") || compound.getString("AttributeName").equalsIgnoreCase("generic.max_health")) && compound.getDouble("Amount") <= 0)
                    {
                        fired_countermeasure("isDeathItem");
                        return true;
                    }
                }
            }
        }
        return false;
    }

    boolean containsDeathItem(ItemStack item)
    {
        if (item != null)
        {
            net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if (nmsItemStack.getTag() != null)
            {
                NBTTagCompound blockentitytag = nmsItemStack.getTag().getCompound("BlockEntityTag");
                NBTTagList itemlist = blockentitytag.getList("Items", 10);

                for (int a = 0; a <= itemlist.size(); a++)
                {
                    NBTTagList attrlist = itemlist.getCompound(a).getCompound("tag").getList("AttributeModifiers", 10);

                    for (int b = 0; b <= attrlist.size(); b++)
                    {
                        String attribute_name = attrlist.getCompound(b).getString("AttributeName");
                        String name = attrlist.getCompound(b).getString("Name");
                        Double amount = attrlist.getCompound(b).getDouble("Amount");

                        if ((name.equalsIgnoreCase("MAX_HEALTH") || attribute_name.equalsIgnoreCase("generic.max_health")) && amount <= 0)
                        {
                            fired_countermeasure("containsDeathItem");
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    boolean isDisconnectItem(ItemStack item)
    {
        net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if (nmsItemStack != null && nmsItemStack.hasTag())
        {
            return isDisconnectItem(nmsItemStack.getTag());
        }
        return false;
    }

    boolean isDisconnectItem(Entity entity)
    {
        if (entity instanceof CraftItem)
        {
            return isDisconnectItem((CraftItem) entity);
        }
        return false;
    }

    private boolean isDisconnectItem(NBTTagCompound item)
    {
        if (item != null)
        {
            if (item.hasKey("CustomPotionColor") && item.getInt("CustomPotionColor") < 0)
            {
                fired_countermeasure("isCustomPotionColorDisconnectItem");
                return true;
            }


            else if ((item.getCompound("display").hasKey("color") && item.getCompound("display").getInt("color") < 0))
            {
                fired_countermeasure("isDisplayColorDisconnectItem");
                return true;
            }

            else if (item.getCompound("BlockEntityTag").hasKey("Patterns"))
            {
                NBTTagList patterns = item.getCompound("BlockEntityTag").getList("Patterns", 10);
                for (int x = 0; x <= (patterns.size() - 1); x++)
                {
                    if (patterns.get(x).getTypeId() == 10)
                    {
                        if (patterns.getCompound(x).hasKey("Color") && patterns.getCompound(x).getInt("Color") < 0)
                        {
                            return true;
                        }
                    }
                }

                for (NBTBase base : item.getCompound("BlockEntityTag").getList("Patterns", 10))
                {
                    if (base.asString().contains("Color:-1"))
                    {
                        fired_countermeasure("isDisplayBannedColorDisconnectItem");
                        return true;
                    }
                }
            }

            else if (item.toString().length() > 262140)
            {
                fired_countermeasure("isLargeNBTDisconnectItem");
                return true;
            }

            else if (isMovementDisconnectItem(item) /*|| isInvalidAttributeName(item)*/)
            {
                return true;
            }
        }
        return false;
    }

    boolean containsDisconnectItem(ItemStack item)
    {
        if (item != null)
        {
            net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if (nmsItemStack != null && nmsItemStack.getTag() != null)
            {
                NBTTagList items = nmsItemStack.getTag().getCompound("BlockEntityTag").getList("Items", 10);

                if (items != null)
                {
                    for (int x = 0; x <= (items.size() - 1); x++)
                    {
                        NBTTagCompound nmsitem = items.getCompound(x);
                        return isDisconnectItem(nmsitem.getCompound("tag"));
                    }
                }
            }
        }
        return false;
    }

    private boolean isMovementDisconnectItem(NBTTagCompound tag)
    {
        if (tag != null)
        {
            NBTTagList attrlist = tag.getList("AttributeModifiers", 10);
            if (attrlist != null)
            {
                HashMap<String, Float> attributes = new HashMap<>();

                for (int a = 0; a <= attrlist.size(); a++)
                {
                    NBTTagCompound attribute = attrlist.getCompound(a);

                    if (attribute.getString("AttributeName").equalsIgnoreCase("generic.movement_speed") && attributes.containsKey(attribute.getString("AttributeName").toLowerCase()) && !Float.isFinite(attribute.getFloat("Amount")))
                    {
                        fired_countermeasure("isMovementDisconnectItem");
                        return true;
                    }

                    attributes.put(attribute.getString("AttributeName").toLowerCase(), attribute.getFloat("Amount"));
                }
            }
        }
        return false;
    }

    /**
     * Does not have any use as this is patched in newer versions and only causes issues.
     */
    @Deprecated
    private boolean isInvalidAttributeName(NBTTagCompound tag)
    {
        if (tag != null)
        {
            NBTTagList attrlist = tag.getList("AttributeModifiers", 10);

            if (attrlist != null)
            {
                for (int a = 0; a <= attrlist.size(); a++)
                {
                    NBTTagCompound attribute = attrlist.getCompound(a);

                    if (attribute != null && attribute.getString("AttributeName").toLowerCase() != "")
                    {
                        if (!Variables.Attributes.liststr.contains(attribute.getString("AttributeName").toLowerCase()))
                        {
                            fired_countermeasure("isInvalidAttributeNameDisconnectItem");
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    void removeInvalidValues(Entity entity)
    {
        NBTTagCompound tag = getEntityNBT(entity);
        if (tag.asString().contains("Color:-"))
        {
            try
            {
                setEntityNBT(entity, MojangsonParser.parse(tag.asString().replaceAll("Color:-", "")));
            }
            catch (CommandSyntaxException e)
            {
                e.printStackTrace();
            }
        }
    }

    boolean isDangerousEgg(ItemStack item)
    {
        if (item != null && item.getItemMeta() instanceof SpawnEggMeta)
        {
            net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);
            return nmsItemStack.hasTag() && VulnerabilityPatcher.main.getConfig().getStringList("BlockedEntityTags").contains(nmsItemStack.getTag().getCompound("EntityTag").getString("id").replaceAll("minecraft:", ""));
        }
        return false;
    }

    boolean isDangerousSkull(ItemStack item)
    {
        if (item != null && item.hasItemMeta())
        {
            NBTTagCompound tag = CraftItemStack.asNMSCopy(item).getTag();

            if (tag != null && tag.hasKey("SkullOwner") && tag.getString("SkullOwner").trim().equals(""))
            {
                return true;
            }
        }
        return false;
    }

    boolean isOversizedSign(ItemStack item)
    {
        if (item != null && item.getType().name().contains("SIGN"))
        {
            net.minecraft.world.item.ItemStack nmsItem = CraftItemStack.asNMSCopy(item);
            NBTTagCompound tag = nmsItem.getTag();
            if (tag != null)
            {
                NBTTagCompound blockEntityTag = tag.getCompound("BlockEntityTag");
                String text1 = blockEntityTag.hasKey("Text1") ? tag.getString("Text1").toLowerCase() : "";
                String text2 = blockEntityTag.hasKey("Text2") ? tag.getString("Text2").toLowerCase() : "";
                String text3 = blockEntityTag.hasKey("Text3") ? tag.getString("Text3").toLowerCase() : "";
                String text4 = blockEntityTag.hasKey("Text4") ? tag.getString("Text4").toLowerCase() : "";
                return text1.contains("\"nbt\":") || text2.contains("\"nbt\":") || text3.contains("\"nbt\":") || text4.contains("\"nbt\":");
            }
        }
        return false;
    }

    void clearOversizedSign(BlockPlaceEvent event)
    {
        ItemStack item = event.getItemInHand();
        net.minecraft.world.item.ItemStack nmsItem = CraftItemStack.asNMSCopy(item);
        NBTTagCompound tag = nmsItem.getTag().getCompound("BlockEntityTag");
        String text1 = tag.hasKey("Text1") ? tag.getString("Text1").toLowerCase() : "";
        String text2 = tag.hasKey("Text2") ? tag.getString("Text2").toLowerCase() : "";
        String text3 = tag.hasKey("Text3") ? tag.getString("Text3").toLowerCase() : "";
        String text4 = tag.hasKey("Text4") ? tag.getString("Text4").toLowerCase() : "";
        if (text1.contains("\"nbt\":"))
        {
            tag.setString("Text1", "{\"text\":\"NBT tag removed\"}");
        }
        if (text2.contains("\"nbt\":"))
        {
            tag.setString("Text2", "{\"text\":\"NBT tag removed\"}");
        }
        if (text3.contains("\"nbt\":"))
        {
            tag.setString("Text3", "{\"text\":\"NBT tag removed\"}");
        }
        if (text4.contains("\"nbt\":"))
        {
            tag.setString("Text4", "{\"text\":\"NBT tag removed\"}");
        }
        ItemStack newItem = CraftItemStack.asBukkitCopy(nmsItem);
        if (event.getPlayer().getInventory().getItemInMainHand().equals(item))
        {
            event.getPlayer().getInventory().setItemInMainHand(newItem);
        }
        else
        {
            event.getPlayer().getInventory().setItemInOffHand(newItem);
        }
    }
}
