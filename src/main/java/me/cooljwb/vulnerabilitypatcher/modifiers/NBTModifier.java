package me.cooljwb.vulnerabilitypatcher.modifiers;

import org.bukkit.Bukkit;
import org.bukkit.entity.Arrow;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Firework;
import org.bukkit.entity.Player;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SpawnEggMeta;
import org.bukkit.projectiles.ProjectileSource;

import java.util.logging.Logger;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class NBTModifier
{

    private Logger log = Logger.getLogger("Minecraft"); // Get the server logger.
    private NBTModifier_1_17_1 nbt_1_17_1 = new NBTModifier_1_17_1();

    public static String getVersion()
    {
        switch (Bukkit.getVersion().substring((Bukkit.getVersion().indexOf(":") + 1), Bukkit.getVersion().indexOf(")")).trim())
        {
            case "1.17":
            case "1.17.1":
                return "1.17";
            default:
                return "";
        }
    }

    protected String itemToString(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.itemToString(item);
            default:
                return "";
        }
    }

    protected boolean removePlayerdata(String player)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.removePlayerdata(player);
        }
        return false;
    }

    protected void resetMeta(Player player, ItemStack item, boolean mainhand)
    {
        switch (getVersion())
        {
            case "1.17":
                nbt_1_17_1.resetMeta(player, item, mainhand);
        }
    }

    protected boolean isPlayer(ProjectileSource source)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.isPlayer(source);
            default:
                return false;
        }
    }

    protected double getArrowDamage(Arrow arrow)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.getArrowDamage(arrow);
            default:
                return 0;
        }
    }

    protected void setArrowDamage(Arrow arrow, double amount)
    {
        switch (getVersion())
        {
            case "1.17":
                nbt_1_17_1.setArrowDamage(arrow, amount);
                break;
        }
    }

    protected int getFireworkEffectSize(Firework firework)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.getFireworkEffectSize(firework);
            default:
                return 0;
        }
    }

    protected boolean hasFireworkLargeEffect(Firework firework)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.hasFireworkLargeEffect(firework);
            default:
                return false;
        }
    }

    public boolean isCrashItem(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.isCrashItem(item);
            default:
                return false;
        }
    }

    public boolean containsCrashItem(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.containsCrashItem(item);
            default:
                return false;
        }
    }

    public boolean isDeathItem(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.isDeathItem(item);
            default:
                return false;
        }
    }

    protected boolean containsDeathItem(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.containsDeathItem(item);
            default:
                return false;
        }
    }

    public boolean isDisconnectItem(Entity entity)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.isDisconnectItem(entity);
            default:
                return false;
        }
    }

    public boolean isDisconnectItem(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.isDisconnectItem(item);
            default:
                return false;
        }
    }

    public boolean containsDisconnectItem(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                return nbt_1_17_1.containsDisconnectItem(item);
            default:
                return false;
        }
    }

    public void removeInvalidValues(Entity entity)
    {
        switch (getVersion())
        {
            case "1.13.2":
                nbt_1_17_1.removeInvalidValues(entity);
                break;
        }
    }

    protected boolean isDangerousEgg(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                if (item != null && item.getType().name().equalsIgnoreCase("spawn_egg"))
                {
                    return true;
                }
                return nbt_1_17_1.isDangerousEgg(item);
            default:
                return false;
        }
    }

    protected boolean isDangerousSkull(ItemStack item)
    {
        switch (getVersion())
        {
            case "1.17":
                nbt_1_17_1.isDangerousSkull(item);
                break;
        }
        return false;
    }

    protected boolean isOversizedSign(ItemStack item)
    {
        if (getVersion().equals("1.17"))
        {
            return nbt_1_17_1.isOversizedSign(item);
        }
        return false;
    }

    protected void clearOversizedSign(BlockPlaceEvent event)
    {
        if (getVersion().equals("1.17"))
        {
            nbt_1_17_1.clearOversizedSign(event);
        }
    }
}
