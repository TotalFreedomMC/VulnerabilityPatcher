package me.cooljwb.vulnerabilitypatcher;

import me.cooljwb.vulnerabilitypatcher.commands.CommandGetLag;
import me.cooljwb.vulnerabilitypatcher.commands.CommandGetNBT;
import me.cooljwb.vulnerabilitypatcher.commands.CommandVulnerabilityPatcher;
import me.cooljwb.vulnerabilitypatcher.patches.*;
import org.bukkit.Bukkit;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public final class VulnerabilityPatcher extends JavaPlugin
{

    // TODO: Make the EventPriority customizable.

    public static VulnerabilityPatcher main;
    public static String pluginName, pluginVersion;
    public static List<String> pluginAuthors;
    public final Death_Items death_items = new Death_Items();
    public final Disconnect_Items disconnect_items = new Disconnect_Items();
    public final Crash_Items crash_items = new Crash_Items();
    private final String version = Bukkit.getVersion().substring((Bukkit.getVersion().indexOf(":") + 1), Bukkit.getVersion().indexOf(")")).trim();
    private final Handswitch hand_switch = new Handswitch();
    public boolean paper = Bukkit.getVersion().contains("Paper");
    private Logger log = Logger.getLogger("Minecraft"); // Get the server logger.
    private ArrayList<Listener> listeners = new ArrayList<>();
    private Patches patches;
    private CommandVulnerabilityPatcher commandvulnerabilitypatcher = new CommandVulnerabilityPatcher();
    private CommandGetNBT commandgetnbt = new CommandGetNBT();
    private CommandGetLag commandgetlag = new CommandGetLag();

    @Override
    public void onEnable()
    {
        if (initialize())
        {
            patches.initialize();

            registerConfig();
            registerEvents();

            Bukkit.getServer().getPluginCommand(CommandVulnerabilityPatcher.vulnerabilitypatcher).setExecutor(commandvulnerabilitypatcher);
            Bukkit.getServer().getPluginCommand(CommandGetNBT.getnbt).setExecutor(commandgetnbt);
            Bukkit.getServer().getPluginCommand(CommandGetLag.getlag).setExecutor(commandgetlag);

            //Bukkit.getPluginManager().registerEvents(new DisconnectionAid(), this); In-dev feature.

            hand_switch.runnable();

            log.log(Level.INFO, String.format("[%s] %s v%s was enabled.", pluginName, pluginName, pluginVersion));
            log.log(Level.INFO, String.format("[%s] %s patches were loaded.", pluginName, listeners.size()));
        }
    }

    private boolean version()
    {
        switch (version)
        {
            case "1.17":
            case "1.17.1":
                return true;
            default:
                log.log(Level.WARNING, String.format("[%s] Server version %s may not work fully or at all with %s-%s, try an earlier plugin version or a newer server version.", pluginName, version, pluginName, pluginVersion));
        }
        return false;
    }

    private boolean initialize()
    {
        pluginName = this.getName();
        pluginVersion = this.getDescription().getVersion();
        pluginAuthors = this.getDescription().getAuthors();

        version();

        this.patches = new Patches(this);
        main = this;

        return true;
    }

    private void registerConfig()
    {
        getConfig().options().copyDefaults(true);
        saveDefaultConfig();
    }

    private void registerEvents()
    {
        for (String patch : getConfig().getStringList("Patches"))
        {
            if (Patches.devmode)
            {
                log.log(Level.INFO, patch);
            }
            switch (patch)
            {
                case "DeathPotions":
                    listeners.add(new Death_Potions());
                    break;
                case "DeathItems":
                    listeners.add(new Death_Items());
                    break;
                case "CrashItems":
                    listeners.add(new Crash_Items());
                    break;
                case "Books":
                    listeners.add(new Books());
                    break;
                case "RougeEntity":
                    registerServerTypeEvent();
                    break;
                case "Arrows":
                    listeners.add(new Arrows());
                    break;
                case "Riptide":
                    listeners.add(new Trident_Riptide());
                    break;
                case "FollowRange":
                    listeners.add(new Follow_Range());
                    break;
                case "DisconnectItems":
                    listeners.add(new Disconnect_Items());
                    break;
                case "EntityTag":
                    listeners.add(new Entity_Tag());
                    break;
                case "Spawner":
                    listeners.add(new Spawner());
                    break;
                case "StructureBlocks":
                    listeners.add(new Structure_Blocks());
                    break;
                case "Chunks":
                    listeners.add(new Chunks());
                    break;
                case "ItemFrames":
                    listeners.add(new Item_Frames());
                    break;
                case "HandSwitch":
                    listeners.add(new Handswitch());
                    break;
                case "Fireworks":
                    listeners.add(new Fireworks());
                    break;
                case "Containers":
                    listeners.add(new Containers());
                    break;
                case "Beehives":
                    listeners.add(new Beehives());
                    break;
                case "Skulls":
                    listeners.add(new Skulls());
                    break;
                case "ItemNames":
                    listeners.add(new Item_Names());
                    break;
                case "OversizedSigns":
                    listeners.add(new Oversized_Sign());
                    break;
            } // Adds all events to the event register.
        }
        listeners.forEach(listener -> Bukkit.getPluginManager().registerEvents(listener, this)); // Register the events.
    }

    private void registerServerTypeEvent()
    {
        if (paper)
        {
            listeners.add(new Rouge_Entity_Paper());
        }
        else
        {
            listeners.add(new Rouge_Entity_Spigot());
        }
    }

    public void reloadPlugin()
    {
        reloadConfig();
        initialize();
        patches.initialize();
    }
}
